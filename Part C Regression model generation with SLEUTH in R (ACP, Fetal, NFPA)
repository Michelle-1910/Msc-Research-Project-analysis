########### Written by Michelle Namuyaba (mynamuyaba@gmail.com or mnamuy01@mail.bbk.ac.uk) ################


if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
BiocManager::install()
##Installing sleuth packages
BiocManager::install(c("rhdf5"))
install.packages("devtools")
#devtools::install_github("pachterlab/sleuth")
BiocManager::install("pachterlab/sleuth")
BiocManager::install(c("biomaRt"))
library('sleuth')
library('biomaRt')
library('tximport')
library('dplyr')
library('ggplot2')
library('DESeq2')
library('goseq')
library('clusterProfiler')
library('org.Hs.eg.db')

#increasing the memory allocated for rstudio
memory.limit(size = NA)

memory.size()

memory.limit(size = 9500)

memory.limit(size = NA)

##Setting up variables containing paths and directories for which the Kallisto results are found
sample_id <- dir(file.path("C:\\Users\\Asus\\Documents\\rna_seq\\kallisto_results\\"))
sample_id

kal_dirs <- file.path("C:\\Users\\Asus\\Documents\\rna_seq\\kallisto_results\\", sample_id)
kal_dirs

##Reading in the meta data to a variable
s2c <- read.table(file.path("C:\\Users\\Asus\\Documents\\rna_seq\\metadata\\SraRunTable.txt"), header = TRUE, stringsAsFactors=FALSE, sep = ",")
s2c <- dplyr::select(s2c, sample = Run, condition = Type)
s2c <- dplyr::mutate(s2c, path = kal_dirs)
s2c

##Associating transcripts to genes
mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",dataset = "hsapiens_gene_ensembl",host = "dec2015.archive.ensembl.org")

t2g <- biomaRt::getBM(attributes = c("ensembl_transcript_id", "transcript_version", "ensembl_gene_id", "external_gene_name", "description","transcript_biotype"),mart = mart)
head(t2g)

t2g$ensembl_transcript_id_version = paste(t2g$ensembl_transcript_id, t2g$transcript_version, sep=".")
t2g <- dplyr::rename(t2g, target_id = ensembl_transcript_id_version,ens_gene = ensembl_gene_id, ext_gene = external_gene_name)
t2g <- dplyr::select(t2g, c('target_id', 'ens_gene', 'ext_gene'))
head(t2g)



# this function is mostly to deal with ENSEMBL transcript names that
# have a trailing .N to keep track of version number
# the function also checks to see if there are duplicate entries for any target IDs
# and issues a warning if sleuth prep is in transcript mode, but stops if
# sleuth prep is in gene mode, since duplicate entries creates problems when
# doing the aggregation
# finally, this method also forces all of the columns in the target_mapping to be
# character columns, to prevent any issues with factors or other data types
# interfering with downstream uses of the target_mapping table

check_target_mapping <- function(t2g, target_mapping, gene_mode) {
  t2g <- data.table::as.data.table(t2g)
  t2g$target_id <- as.character(t2g$target_id)
  target_mapping <- apply(target_mapping, 2, as.character)
  target_mapping <- data.table::as.data.table(target_mapping)
  
  tmp_join <- dplyr::inner_join(t2g, target_mapping, by = 'target_id')
  
  if (!nrow(tmp_join)) {
    t2g <- dplyr::mutate(t2g, target_id_old = sub('\\.[0-9]+', '', target_id))
    target_mapping_upd <- dplyr::rename(target_mapping, target_id_old = target_id)
    
    tmp_join <- dplyr::inner_join(t2g, target_mapping_upd,
                                  c('target_id_old'))
    
    if (!nrow(tmp_join)) {
      stop("couldn't solve nonzero intersection")
    }
    
    target_mapping <- dplyr::left_join(target_mapping,
                                       unique(dplyr::select(tmp_join, target_id_new = target_id,
                                                            target_id = target_id_old),
                                              by = NULL),
                                       by = 'target_id')
    # if we couldn't recover, use the old one
    target_mapping <- dplyr::mutate(target_mapping,
                                    target_id_new = ifelse(is.na(target_id_new), target_id, target_id_new))
    target_mapping <- dplyr::select(target_mapping, -target_id)
    target_mapping <- dplyr::rename(target_mapping, target_id = target_id_new)
    
    warning(paste0('intersection between target_id from kallisto runs and ',
                   'the target_mapping is empty. attempted to fix problem by removing .N ',
                   'from target_id, then merging back into target_mapping.',
                   ' please check obj$target_mapping to ensure this new mapping is correct.'))
  }
  
  if(any(duplicated(target_mapping$target_id))) {
    indices <- which(duplicated(target_mapping$target_id))
    duplicated_ids <- target_mapping$target_id[indices]
    formatted_ids <- paste(duplicated_ids, collapse = ", ")
    if(gene_mode) {
      stop("There is at least one duplicated target ID in the target mapping. ",
           "Since sleuth prep is in gene aggregation mode, any duplicated ",
           "entries will cause errors during gene aggregation. Here is a list ",
           "of all the duplicated target IDs:\n", formatted_ids)
    } else {
      warning("There is at least one duplicated target ID in the target ",
              "mapping. Since sleuth prep is not in gene aggregation mode, ",
              "duplicated entries will not cause errors during preparation, ",
              "but may cause unexpected behavior when making any plots or ",
              "tables. Here is a list of all the duplicated target IDs:\n",
              formatted_ids)
    }
  }
  adf(target_mapping)
}

##Differential expression
#Preparing the analysis object
design <- ~condition 
so <- sleuth_prep(s2c, full_model = design, num_cores = 2, read_bootstrap_tpm = TRUE, extra_bootstrap_summary=TRUE, target_mapping = t2g, transform_fun_counts = function(x) log2(x + 0.5),  aggregation_column = 'ens_gene') 

#The analysis
so <- sleuth_fit(so, design, 'full')

models(so)

##Handling the Fetal(control)vsACP(tumour)##

#####GENE-LEVEL ANALYSIS#####
#do a Wald test 
so <- sleuth_wt(so, which_beta='conditionFetal', which_model='full')


sleuth_table_wt <- sleuth_results(so, test= 'conditionFetal', test_type = 'wt',which_model = 'full',show_all = TRUE)

#significant genes: 
sleuth_significant_wt_na <- dplyr::filter(sleuth_table_wt, qval <= 0.05)
dim(sleuth_significant_wt_na)
head(sleuth_significant_wt_na, 3)

#omitting the NA values
sleuth_significant_wt <- na.omit(sleuth_significant_wt_na)
dim(sleuth_significant_wt)

#counts for top significant genes in Wald Test
selected_gene <- sleuth_significant_wt$target_id[1]
plot_bootstrap(so, target_id=(dplyr::filter(t2g, ens_gene==selected_gene))$target_id[1], units = "est_counts", color_by = "condition")
selected_gene <- sleuth_significant_wt$ext_gene[1]
selected_gene

selected_gene <- sleuth_significant_wt$target_id[2]
plot_bootstrap(so, target_id=(dplyr::filter(t2g, ens_gene==selected_gene))$target_id[1], units = "est_counts", color_by = "condition")
selected_gene <- sleuth_significant_wt$ext_gene[2]
selected_gene

selected_gene <- sleuth_significant_wt$target_id[3]
plot_bootstrap(so, target_id=(dplyr::filter(t2g, ens_gene==selected_gene))$target_id[1], units = "est_counts", color_by = "condition")
selected_gene <- sleuth_significant_wt$ext_gene[3]
selected_gene

#LRT test
so <- sleuth_fit(so, ~1, 'null')
so <- sleuth_lrt(so, 'null', 'full')
sleuth_table_lrt <- sleuth_results(so, test='null:full', 'lrt')
sleuth_table_lrt[1:5,]
sleuth_significant_lrt_na <- dplyr::filter(sleuth_table_lrt, qval <= 0.05)
dim(sleuth_significant_lrt_na)
head(sleuth_significant_lrt_na, 3) 

#omitting the NA values
sleuth_significant_lrt <- na.omit(sleuth_significant_lrt_na)
dim(sleuth_significant_lrt)


#checking the table has no duplicate entries
length(unique(sleuth_table_wt$target_id)) == length(sleuth_table_wt$target_id)

#saving the gene differential expression results from the wald test
write.table(sleuth_significant_wt, file= "C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_FetalvsACP\\sleuth_significant_q005.txt", quote=FALSE, row.names = FALSE, col.names = TRUE)

##### TRANSCRIPT-LEVEL ANALYSIS #####
sleuth_table_txn <- sleuth_results(so, test = 'conditionFetal',test_type = 'wt',which_model = 'full',show_all = TRUE,pval_aggregate = FALSE)
dim(sleuth_table_txn)
sleuth_table_txn[1:5,]

#significant transcripts:
sleuth_significant_txn_na <- dplyr::filter(sleuth_table_txn, qval <= 0.05)
dim(sleuth_significant_txn_na) 
head(sleuth_significant_txn_na, 3)

#omitting the NA values
sleuth_significant_txn <- na.omit(sleuth_significant_txn_na)
dim(sleuth_significant_txn)

#saving the results
write.table(sleuth_significant_txn, file="C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_FetalvsACP\\sleuth_significant_TXN_q005.txt", quote=FALSE, row.names = FALSE, col.names = TRUE) 

#determining up and down regulated transcripts and genes
#up regulated genes
sleuth_significant_txn_na.up <- dplyr::filter(sleuth_table_txn, (qval <= 0.05) & (b>0))  
dim(sleuth_significant_txn_na.up)

#omitting the NA values
sleuth_significant_txn.up <- na.omit(sleuth_significant_txn_na.up)
dim(sleuth_significant_txn.up)

head(sleuth_significant_txn.up, 4)

#how many genes are upregulated? 
length(unique(sleuth_significant_txn.up$ens_gene))

#saving the results
write.table(unique(sleuth_significant_txn.up), file="C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_FetalvsACP\\sleuth_significant_q005_up.txt", quote=FALSE, row.names = FALSE, col.names = TRUE)

#down regulated genes
sleuth_significant_txn_na.down <- dplyr::filter(sleuth_table_txn, (qval <= 0.05) & (b<0))
dim(sleuth_significant_txn_na.down)

#omitting the NA values
sleuth_significant_txn.down <- na.omit(sleuth_significant_txn_na.down)
dim(sleuth_significant_txn.down)

head(sleuth_significant_txn.down, 4)


#how many genes are downpregulated? 
length(unique(sleuth_significant_txn.down$ens_gene))

#saving the results
write.table(unique(sleuth_significant_txn.down), file="C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_FetalvsACP\\sleuth_significant_q005_down.txt", quote=FALSE, row.names = FALSE, col.names = TRUE)

####### SUMMARY OF NUMBERS ##########
#all transcripts included initially in the analysis: 
length(sleuth_table_txn$target_id)

#all transcripts included initially in the analysis:
length(sleuth_table_wt$target_id)

#the number of genes in the transcript table
length(unique(sleuth_table_txn$ens_gene))

#significantly DE genes (aggregated) in the gene results table at q<0.05 
length(sleuth_significant_wt$target_id)

#significantly DE transcripts in the transcript results table
length(sleuth_significant_txn$target_id) 

#how many genes correspond to the above transcripts?
length(unique(sleuth_significant_txn$ens_gene))


##Handling the NFPA(control)vsACP(tumour)##

#####GENE-LEVEL ANALYSIS#####
#do a Wald test 
so <- sleuth_wt(so, which_beta='conditionNFPA', which_model='full')


sleuth_table_wt <- sleuth_results(so, test= 'conditionNFPA', test_type = 'wt',which_model = 'full',show_all = TRUE)
dim(sleuth_table_wt)

#significant genes: 
sleuth_significant_wt_na <- dplyr::filter(sleuth_table_wt, qval <= 0.05)
dim(sleuth_significant_wt_na)
head(sleuth_significant_wt_na, 3)

#omitting the NA values
sleuth_significant_wt <- na.omit(sleuth_significant_wt_na)
dim(sleuth_significant_wt)

#counts for top significant genes in Wald Test
selected_gene <- sleuth_significant_wt$target_id[1]
plot_bootstrap(so, target_id=(dplyr::filter(t2g, ens_gene==selected_gene))$target_id[1], units = "est_counts", color_by = "condition")
selected_gene <- sleuth_significant_wt$ext_gene[1]
selected_gene

selected_gene <- sleuth_significant_wt$target_id[2]
plot_bootstrap(so, target_id=(dplyr::filter(t2g, ens_gene==selected_gene))$target_id[1], units = "est_counts", color_by = "condition")
selected_gene <- sleuth_significant_wt$ext_gene[2]
selected_gene

selected_gene <- sleuth_significant_wt$target_id[3]
plot_bootstrap(so, target_id=(dplyr::filter(t2g, ens_gene==selected_gene))$target_id[1], units = "est_counts", color_by = "condition")
selected_gene <- sleuth_significant_wt$ext_gene[3]
selected_gene

#LRT test
so <- sleuth_fit(so, ~1, 'null')
so <- sleuth_lrt(so, 'null', 'full')
sleuth_table_lrt <- sleuth_results(so, test='null:full', 'lrt')
sleuth_table_lrt[1:5,]
sleuth_significant_lrt_na <- dplyr::filter(sleuth_table_lrt, qval <= 0.05)
dim(sleuth_significant_lrt_na)
head(sleuth_significant_lrt_na, 3) 

#omitting the NA values
sleuth_significant_lrt <- na.omit(sleuth_significant_lrt_na)
dim(sleuth_significant_lrt)

#checking the table has no duplicate entries
length(unique(sleuth_table_wt$target_id)) == length(sleuth_table_wt$target_id)

#saving the gene differential expression results from the wald test
write.table(sleuth_significant_wt, file= "C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_NFPAvsACP\\sleuth_significant_q005.txt", quote=FALSE, row.names = FALSE, col.names = TRUE)


##### TRANSCRIPT-LEVEL ANALYSIS #####
sleuth_table_txn <- sleuth_results(so, test = 'conditionNFPA',test_type = 'wt',which_model = 'full',show_all = TRUE,pval_aggregate = FALSE)
dim(sleuth_table_txn)
sleuth_table_txn[1:5,]

#significant transcripts:
sleuth_significant_txn_na <- dplyr::filter(sleuth_table_txn, qval <= 0.05)
dim(sleuth_significant_txn_na) 
head(sleuth_significant_txn_na, 3)

#omitting the NA values
sleuth_significant_txn <- na.omit(sleuth_significant_txn_na)
dim(sleuth_significant_txn)

#saving the results
write.table(sleuth_significant_txn, file="C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_NFPAvsACP\\sleuth_significant_TXN_q005.txt", quote=FALSE, row.names = FALSE, col.names = TRUE) 

#determining up and down regulated transcripts and genes
#up regulated genes
sleuth_significant_txn_na.up <- dplyr::filter(sleuth_table_txn, (qval <= 0.05) & (b>0))  
dim(sleuth_significant_txn_na.up)

#omitting the NA values
sleuth_significant_txn.up <- na.omit(sleuth_significant_txn_na.up)
dim(sleuth_significant_txn.up)

head(sleuth_significant_txn.up, 4)

#how many genes are upregulated? 
length(unique(sleuth_significant_txn.up$ens_gene))

#saving the results
write.table(unique(sleuth_significant_txn.up), file="C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_NFPAvsACP\\sleuth_significant_q005_up.txt", quote=FALSE, row.names = FALSE, col.names = TRUE)

#down regulated genes
sleuth_significant_txn_na.down <- dplyr::filter(sleuth_table_txn, (qval <= 0.05) & (b<0))
dim(sleuth_significant_txn_na.down)

#omitting the NA values
sleuth_significant_txn.down <- na.omit(sleuth_significant_txn_na.down)
dim(sleuth_significant_txn.down)

head(sleuth_significant_txn.down, 4)


#how many genes are downpregulated? 
length(unique(sleuth_significant_txn.down$ens_gene))

#saving the results
write.table(unique(sleuth_significant_txn.down), file="C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_NFPAvsACP\\sleuth_significant_q005_down.txt", quote=FALSE, row.names = FALSE, col.names = TRUE)

####### SUMMARY OF NUMBERS ##########
#all transcripts included initially in the analysis: 
length(sleuth_table_txn$target_id)

#all transcripts included initially in the analysis:
length(sleuth_table_wt$target_id)

#the number of genes in the transcript table
length(unique(sleuth_table_txn$ens_gene))

#significantly DE genes (aggregated) in the gene results table at q<0.05 
length(sleuth_significant_wt$target_id)

#significantly DE transcripts in the transcript results table
length(sleuth_significant_txn$target_id) 

#how many genes correspond to the above transcripts?
length(unique(sleuth_significant_txn$ens_gene))

##saving the common significant genes##

nfpa_siggenes <- read.table(file.path("C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_NFPAvsACP\\sleuth_significant_q005.txt"), header = TRUE, stringsAsFactors=FALSE, sep = " ")
dim(nfpa_siggenes)

fetal_siggenes <- read.table(file.path("C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_FetalvsACP\\sleuth_significant_q005.txt"), header = TRUE, stringsAsFactors=FALSE, sep = " ")
dim(fetal_siggenes)

common_siggenes <- fetal_siggenes[fetal_siggenes$target_id %in% nfpa_siggenes$target_id,]
dim(common_siggenes)
common_siggenes <- common_siggenes %>% distinct(target_id, .keep_all=TRUE) 
dim(common_siggenes)

write.table(common_siggenes, file= "C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_common\\common_significantgenes.txt", quote=FALSE, row.names = FALSE, col.names = TRUE)

##saving the common significant transcripts##

nfpa_sigtxn <- read.table(file.path("C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_NFPAvsACP\\sleuth_significant_TXN_q005.txt"), header = TRUE, stringsAsFactors=FALSE, sep = " ")
dim(nfpa_sigtxn)

fetal_sigtxn <- read.table(file.path("C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_FetalvsACP\\sleuth_significant_TXN_q005.txt"), header = TRUE, stringsAsFactors=FALSE, sep = " ")
dim(fetal_sigtxn)

common_sigtxn <- fetal_sigtxn[fetal_sigtxn$target_id %in% nfpa_sigtxn$target_id,]
dim(common_sigtxn)
length(unique(common_sigtxn$ens_gene))
common_sigtxn <- common_sigtxn %>% distinct(ens_gene, .keep_all=TRUE)
dim(common_sigtxn)

write.table(common_sigtxn, file= "C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_common\\common_significanttranscripts.txt", quote=FALSE, row.names = FALSE, col.names = TRUE)

##saving the common upregulated transcripts##

nfpa_upsigtxn <- read.table(file.path("C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_NFPAvsACP\\sleuth_significant_q005_up.txt"), header = TRUE, stringsAsFactors=FALSE, sep = " ")
dim(nfpa_upsigtxn)

fetal_upsigtxn <- read.table(file.path("C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_FetalvsACP\\sleuth_significant_q005_up.txt"), header = TRUE, stringsAsFactors=FALSE, sep = " ")
dim(fetal_upsigtxn)

common_upsigtxn <- fetal_upsigtxn[fetal_upsigtxn$target_id %in% nfpa_upsigtxn$target_id,]
dim(common_upsigtxn)
length(unique(common_upsigtxn$ens_gene))
common_upsigtxn <- common_upsigtxn %>% distinct(ens_gene, .keep_all=TRUE)
dim(common_upsigtxn)

write.table(common_upsigtxn, file= "C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_common\\common_up_significanttranscripts.txt", quote=FALSE, row.names = FALSE, col.names = TRUE)

##saving the common downregulated transcripts##

nfpa_downsigtxn <- read.table(file.path("C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_NFPAvsACP\\sleuth_significant_q005_down.txt"), header = TRUE, stringsAsFactors=FALSE, sep = " ")
dim(nfpa_downsigtxn)

fetal_downsigtxn <- read.table(file.path("C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_FetalvsACP\\sleuth_significant_q005_down.txt"), header = TRUE, stringsAsFactors=FALSE, sep = " ")
dim(fetal_downsigtxn)

common_downsigtxn <- fetal_downsigtxn[fetal_downsigtxn$target_id %in% nfpa_downsigtxn$target_id,]
dim(common_downsigtxn)
length(unique(common_downsigtxn$ens_gene))
common_downsigtxn <- common_downsigtxn %>% distinct(ens_gene, .keep_all=TRUE)
dim(common_downsigtxn)

write.table(common_downsigtxn, file= "C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_common\\common_down_significanttranscripts.txt", quote=FALSE, row.names = FALSE, col.names = TRUE)



##Run GO enrichment analysis with clusterProfiler##

##changing the ensembl IDS to entrez IDS to increase the speed of the enrichGO step##
genes <- common_siggenes$target_id
head(genes,5)
genes <- bitr(genes, fromType="ENSEMBL", toType="ENTREZID", OrgDb="org.Hs.eg.db")
head(genes,10)
genes <- genes$ENTREZID
head(genes,5)

genes_all <- dplyr::filter(sleuth_table_wt, !is.na(qval))$target_id
head(genes_all,5)
genes_all <- bitr(genes_all, fromType="ENSEMBL", toType="ENTREZID", OrgDb="org.Hs.eg.db")
head(genes_all,5)
genes_all <- genes_all$ENTREZID
head(genes_all,5)

ego <- enrichGO(gene = genes, 
                universe = genes_all,
                keyType = "ENTREZID",
                OrgDb = org.Hs.eg.db, 
                ont = "BP",
                pAdjustMethod = "BH", 
                qvalueCutoff = 0.05, 
                readable = TRUE)

cluster_summary <- data.frame(ego)

#saving the results#
write.csv(cluster_summary, file= "C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_common\\clusterProfiler_BP.csv")

#enrichment dotplot
enrichment_dotplot <- clusterProfiler::dotplot(ego, 
                                               x="GeneRatio",
                                               showCategory = 30)
plot(enrichment_dotplot)

### GO over-representation analysis with clusterProfiler (using transcript-level sleuth results)

# first, create a df without duplicate genes (first row is kept and so most important transcript should be kept in the df)
df <- common_sigtxn %>% distinct(ens_gene, .keep_all=TRUE) 
# check it worked
dim(df)
length(unique(common_sigtxn$ens_gene)) == dim(df)[1]
# now re-run enrichGO using these genes instead 

##changing the ensembl IDS to entrez IDS to increase the speed of the enrichGO step##
genes <- df$ens_gene
head(genes,5)
genes <- bitr(genes, fromType="ENSEMBL", toType="ENTREZID", OrgDb="org.Hs.eg.db")
head(genes,10)
genes <- genes$ENTREZID
head(genes,5)

genes_all <- unique(dplyr::filter(sleuth_table_txn, !is.na(qval))$ens_gene)
head(genes_all,5)
genes_all <- bitr(genes_all, fromType="ENSEMBL", toType="ENTREZID", OrgDb="org.Hs.eg.db")
head(genes_all,5)
genes_all <- genes_all$ENTREZID
head(genes_all,5)

ego.txn <- enrichGO(gene = genes, 
                    universe = genes_all,
                    keyType = "ENTREZID",
                    OrgDb = org.Hs.eg.db, 
                    ont = "BP",
                    pAdjustMethod = "BH", 
                    qvalueCutoff = 0.05, 
                    readable = TRUE)
#repeat quickly the dotplot and emapplot to compare them to the ones produced from the gene table
#they should be very similar
enrichment_dotplot <- clusterProfiler::dotplot(ego.txn, 
                                               x="GeneRatio",
                                               showCategory = 30)
plot(enrichment_dotplot)

### Plotting the  significantly upregulated genes ###

upsig_genes <- read.table(file.path("C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_common\\common_up_significanttranscripts.txt"), header = TRUE, stringsAsFactors=FALSE, sep = " ")

upsig_genes

# first, create a df without duplicate genes (first row is kept and so most important transcript should be kept in the df)
df <- upsig_genes %>% distinct(ens_gene, .keep_all=TRUE) 
# check it worked
dim(df)
length(unique(upsig_genes$ens_gene)) == dim(df)[1]
# now re-run enrichGO using these genes instead 

##changing the ensembl IDS to entrez IDS to increase the speed of the enrichGO step##
genes <- df$ens_gene
head(genes,5)
genes <- bitr(genes, fromType="ENSEMBL", toType="ENTREZID", OrgDb="org.Hs.eg.db")
head(genes,10)
genes <- genes$ENTREZID
head(genes,5)

genes_all <- unique(dplyr::filter(sleuth_table_txn, !is.na(qval))$ens_gene)
head(genes_all,5)
genes_all <- bitr(genes_all, fromType="ENSEMBL", toType="ENTREZID", OrgDb="org.Hs.eg.db")
head(genes_all,5)
genes_all <- genes_all$ENTREZID
head(genes_all,5)

ego.txn <- enrichGO(gene = genes, 
                    universe = genes_all,
                    keyType = "ENTREZID",
                    OrgDb = org.Hs.eg.db, 
                    ont = "BP",
                    pAdjustMethod = "BH", 
                    qvalueCutoff = 0.05, 
                    readable = TRUE)
#repeat quickly the dotplot and emapplot to compare them to the ones produced from the gene table
#they should be very similar
enrichment_dotplot <- clusterProfiler::dotplot(ego.txn, 
                                               x="GeneRatio",
                                               showCategory = 30)
plot(enrichment_dotplot)

### Plotting the significantly downregulated genes ### 

downsig_genes <- read.table(file.path("C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_common\\common_down_significanttranscripts.txt"), header = TRUE, stringsAsFactors=FALSE, sep = " ")

downsig_genes

# first, create a df without duplicate genes (first row is kept and so most important transcript should be kept in the df)
df <- downsig_genes %>% distinct(ens_gene, .keep_all=TRUE) 
# check it worked
dim(df)
length(unique(downsig_genes$ens_gene)) == dim(df)[1]
# now re-run enrichGO using these genes instead 

##changing the ensembl IDS to entrez IDS to increase the speed of the enrichGO step##
genes <- df$ens_gene
head(genes,5)
genes <- bitr(genes, fromType="ENSEMBL", toType="ENTREZID", OrgDb="org.Hs.eg.db")
head(genes,10)
genes <- genes$ENTREZID
head(genes,5)

genes_all <- unique(dplyr::filter(sleuth_table_txn, !is.na(qval))$ens_gene)
head(genes_all,5)
genes_all <- bitr(genes_all, fromType="ENSEMBL", toType="ENTREZID", OrgDb="org.Hs.eg.db")
head(genes_all,5)
genes_all <- genes_all$ENTREZID
head(genes_all,5)

ego.txn <- enrichGO(gene = genes, 
                    universe = genes_all,
                    keyType = "ENTREZID",
                    OrgDb = org.Hs.eg.db, 
                    ont = "BP",
                    pAdjustMethod = "BH", 
                    qvalueCutoff = 0.05, 
                    readable = TRUE)
#repeat quickly the dotplot and emapplot to compare them to the ones produced from the gene table
#they should be very similar
enrichment_dotplot <- clusterProfiler::dotplot(ego.txn, 
                                               x="GeneRatio",
                                               showCategory = 30)
plot(enrichment_dotplot)


### Exploratory Data Analysis###

samples <- read.table(file.path("C:\\Users\\Asus\\Documents\\rna_seq\\metadata\\SraRunTable.txt"), header = TRUE, stringsAsFactors=FALSE, sep = ",")
samples$Run

sample_id <- dir(file.path("C:\\Users\\Asus\\Documents\\rna_seq\\kallisto_results\\"))
sample_id

kal_files <- file.path("C:\\Users\\Asus\\Documents\\rna_seq\\kallisto_results\\", sample_id, "abundance.h5")
kal_files

metadata <- read.table(file.path("C:\\Users\\Asus\\Documents\\rna_seq\\metadata\\SraRunTable.txt"), header = TRUE, stringsAsFactors=FALSE, sep = ",")
metadata <- dplyr::mutate(metadata, condition = Type)
metadata

##Associating transcripts to genes
mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",dataset = "hsapiens_gene_ensembl",host = "dec2015.archive.ensembl.org")

t2g <- biomaRt::getBM(attributes = c("ensembl_transcript_id", "transcript_version", "ensembl_gene_id", "external_gene_name", "description","transcript_biotype"),mart = mart)
head(t2g)

t2g$ensembl_transcript_id_version = paste(t2g$ensembl_transcript_id, t2g$transcript_version, sep=".")
t2g <- dplyr::rename(t2g, target_id = ensembl_transcript_id_version,ens_gene = ensembl_gene_id, ext_gene = external_gene_name)
t2g <- dplyr::select(t2g, c('target_id', 'ens_gene', 'ext_gene'))
head(t2g)

#importing kallisto counts into tximport 
txi.kallisto <- tximport(kal_files, type="kallisto", tx2gene=t2g, countsFromAbundance = "lengthScaledTPM")
names(txi.kallisto)
head(txi.kallisto$counts)

# Check that the row names of the metadata equal the column names of the **raw counts** data
all(colnames(txi.kallisto$counts) == rownames(metadata))

# Create DESeq2Dataset object
dds <- DESeqDataSetFromTximport(txi.kallisto, colData = metadata, design = ~condition)

# Transform counts for data visualization
rld <- rlog(dds, blind=TRUE)

# Plot PCA 
plotPCA(rld, intgroup="condition")



## Plotting the significantly differentially expressed genes ###

### Plotting the top 10 significantly differentially expressed genes ###

sig_genes <- read.table(file.path("C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_common\\common_significanttranscripts.txt"), header = TRUE, stringsAsFactors=FALSE, sep = " ")

sig_genes <- sig_genes %>% distinct(ens_gene, .keep_all=TRUE)

top_sig_genes <- sig_genes[order(sig_genes$qval, -sig_genes$b),]

top10_sig_genes <- top_sig_genes[1:10,]

top10_sig_genes <- dplyr::select(top10_sig_genes, ensembl_transcriptID = target_id, ensembl_geneID = ens_gene, gene_symbol = ext_gene, q_value = qval, Log2_foldchange = b)

top10_sig_genes

## plot using ggplot2

ggplot(data = top10_sig_genes) +
  geom_point(mapping = aes(x = gene_symbol, y = q_value), color = "red", position=position_jitter(w=0.1,h=0)) +
  scale_y_log10() +
  xlab("gene_symbol") +
  ylab("Log2_foldchange") +
  ggtitle("Top 10 Significant Differentially Expressed Genes") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  theme(plot.title=element_text(hjust=0.5))
  

### Plotting the top 10 significantly upregulated genes ###

sig_genes <- read.table(file.path("C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_common\\common_up_significanttranscripts.txt"), header = TRUE, stringsAsFactors=FALSE, sep = " ")

sig_genes <- sig_genes %>% distinct(ens_gene, .keep_all=TRUE)

top_upsig_genes <- sig_genes[order(sig_genes$qval, -sig_genes$b),]

top10_upsig_genes <- top_upsig_genes[1:10,]

top10_upsig_genes <- dplyr::select(top10_upsig_genes, ensembl_transcriptID = target_id, ensembl_geneID = ens_gene, gene_symbol = ext_gene, q_value = qval, Log2_foldchange = b)

top10_upsig_genes

## plot using ggplot2

ggplot(data = top10_upsig_genes) +
  geom_point(mapping = aes(x = gene_symbol, y = q_value), color = "blue", position=position_jitter(w=0.1,h=0)) +
  scale_y_log10() +
  xlab("gene_symbol") +
  ylab("Log2_foldchange") +
  ggtitle("Top 10 Significantly Upregulated Genes") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  theme(plot.title=element_text(hjust=0.5))


### Plotting the top 10 significantly downregulated genes ###

sig_genes <- read.table(file.path("C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_common\\common_down_significanttranscripts.txt"), header = TRUE, stringsAsFactors=FALSE, sep = " ")

sig_genes <- sig_genes %>% distinct(ens_gene, .keep_all=TRUE)

top_downsig_genes <- sig_genes[order(sig_genes$qval, -sig_genes$b),]

top10_downsig_genes <- top_downsig_genes[1:10,]

top10_downsig_genes <- dplyr::select(top10_downsig_genes, ensembl_transcriptID = target_id, ensembl_geneID = ens_gene, gene_symbol = ext_gene, q_value = qval, Log2_foldchange = b)

top10_downsig_genes

## plot using ggplot2

ggplot(data = top10_downsig_genes) +
  geom_point(mapping = aes(x = gene_symbol, y = q_value), color = "purple", position=position_jitter(w=0.1,h=0)) +
  scale_y_log10() +
  xlab("gene_symbol") +
  ylab("Log2_foldchange") +
  ggtitle("Top 10 Significantly Downregulated Genes") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  theme(plot.title=element_text(hjust=0.5))
  
  
