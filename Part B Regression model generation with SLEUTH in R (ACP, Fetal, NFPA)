if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
BiocManager::install()
##Installing sleuth packages
BiocManager::install(c("rhdf5"))
install.packages("devtools")
#devtools::install_github("pachterlab/sleuth")
BiocManager::install("pachterlab/sleuth")
BiocManager::install(c("biomaRt"))
library('sleuth')
library('biomaRt')

##Setting up variables containing paths and directories for which the Kallisto results are found
sample_id <- dir(file.path("C:\\Users\\Asus\\Documents\\rna_seq\\kallisto_results\\"))
sample_id

kal_dirs <- file.path("C:\\Users\\Asus\\Documents\\rna_seq\\kallisto_results\\", sample_id)
kal_dirs

##Reading in the meta data to a variable
s2c <- read.table(file.path("C:\\Users\\Asus\\Documents\\rna_seq\\metadata\\SraRunTable.txt"), header = TRUE, stringsAsFactors=FALSE, sep = ",")
s2c <- dplyr::select(s2c, sample = Run, condition = Type)
s2c <- dplyr::mutate(s2c, path = kal_dirs)
s2c

##Associating transcripts to genes
mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",dataset = "hsapiens_gene_ensembl",host = "dec2015.archive.ensembl.org")

t2g <- biomaRt::getBM(attributes = c("ensembl_transcript_id", "transcript_version", "ensembl_gene_id", "external_gene_name", "description","transcript_biotype"),mart = mart)
head(t2g)

t2g$ensembl_transcript_id_version = paste(t2g$ensembl_transcript_id, t2g$transcript_version, sep=".")
t2g <- dplyr::rename(t2g, target_id = ensembl_transcript_id_version,ens_gene = ensembl_gene_id, ext_gene = external_gene_name)
t2g <- dplyr::select(t2g, c('target_id', 'ens_gene', 'ext_gene'))
head(t2g)
t2g


# this function is mostly to deal with ENSEMBL transcript names that
# have a trailing .N to keep track of version number
# the function also checks to see if there are duplicate entries for any target IDs
# and issues a warning if sleuth prep is in transcript mode, but stops if
# sleuth prep is in gene mode, since duplicate entries creates problems when
# doing the aggregation
# finally, this method also forces all of the columns in the target_mapping to be
# character columns, to prevent any issues with factors or other data types
# interfering with downstream uses of the target_mapping table

check_target_mapping <- function(t2g, target_mapping, gene_mode) {
  t2g <- data.table::as.data.table(t2g)
  t2g$target_id <- as.character(t2g$target_id)
  target_mapping <- apply(target_mapping, 2, as.character)
  target_mapping <- data.table::as.data.table(target_mapping)
  
  tmp_join <- dplyr::inner_join(t2g, target_mapping, by = 'target_id')
  
  if (!nrow(tmp_join)) {
    t2g <- dplyr::mutate(t2g, target_id_old = sub('\\.[0-9]+', '', target_id))
    target_mapping_upd <- dplyr::rename(target_mapping, target_id_old = target_id)
    
    tmp_join <- dplyr::inner_join(t2g, target_mapping_upd,
                                  c('target_id_old'))
    
    if (!nrow(tmp_join)) {
      stop("couldn't solve nonzero intersection")
    }
    
    target_mapping <- dplyr::left_join(target_mapping,
                                       unique(dplyr::select(tmp_join, target_id_new = target_id,
                                                            target_id = target_id_old),
                                              by = NULL),
                                       by = 'target_id')
    # if we couldn't recover, use the old one
    target_mapping <- dplyr::mutate(target_mapping,
                                    target_id_new = ifelse(is.na(target_id_new), target_id, target_id_new))
    target_mapping <- dplyr::select(target_mapping, -target_id)
    target_mapping <- dplyr::rename(target_mapping, target_id = target_id_new)
    
    warning(paste0('intersection between target_id from kallisto runs and ',
                   'the target_mapping is empty. attempted to fix problem by removing .N ',
                   'from target_id, then merging back into target_mapping.',
                   ' please check obj$target_mapping to ensure this new mapping is correct.'))
  }
  
  if(any(duplicated(target_mapping$target_id))) {
    indices <- which(duplicated(target_mapping$target_id))
    duplicated_ids <- target_mapping$target_id[indices]
    formatted_ids <- paste(duplicated_ids, collapse = ", ")
    if(gene_mode) {
      stop("There is at least one duplicated target ID in the target mapping. ",
           "Since sleuth prep is in gene aggregation mode, any duplicated ",
           "entries will cause errors during gene aggregation. Here is a list ",
           "of all the duplicated target IDs:\n", formatted_ids)
    } else {
      warning("There is at least one duplicated target ID in the target ",
              "mapping. Since sleuth prep is not in gene aggregation mode, ",
              "duplicated entries will not cause errors during preparation, ",
              "but may cause unexpected behavior when making any plots or ",
              "tables. Here is a list of all the duplicated target IDs:\n",
              formatted_ids)
    }
  }
  adf(target_mapping)
}

##Differential expression
#Preparing the analysis object
design <- ~condition 
so <- sleuth_prep(s2c, full_model = design, read_bootstrap_tpm = TRUE, extra_bootstrap_summary=TRUE, target_mapping = t2g, transform_fun_counts = function(x) log2(x + 0.5),  aggregation_column = 'ens_gene') 

#The analysis
so <- sleuth_fit(so, design, 'full')

models(so)

##Handling the Fetal(control)vsACP(tumour)##

#####GENE-LEVEL ANALYSIS#####
#do a Wald test 
so <- sleuth_wt(so, which_beta='conditionFetal', which_model='full')
dim(sleuth_table_wt)

sleuth_table_wt <- sleuth_results(so, test= 'conditionFetal', test_type = 'wt',which_model = 'full',show_all = TRUE)

#significant genes: 
sleuth_significant_wt <- dplyr::filter(sleuth_table_wt, qval <= 0.05)
dim(sleuth_significant_wt)
head(sleuth_significant_wt, 3)

#LRT test
so <- sleuth_fit(so, ~1, 'null')
so <- sleuth_lrt(so, 'null', 'full')
sleuth_table_lrt <- sleuth_results(so, test='null:full', 'lrt')
sleuth_table_lrt[1:5,]
sleuth_significant_lrt <- dplyr::filter(sleuth_table_lrt, qval <= 0.05)
dim(sleuth_significant_lrt)
head(sleuth_significant_lrt, 3)

#counts for top significant genes in Wald Test
selected_gene <- sleuth_significant_wt$target_id[1]
plot_bootstrap(so, target_id=(dplyr::filter(t2g, ens_gene==selected_gene))$target_id[1], units = "est_counts", color_by = "condition")

selected_gene <- sleuth_significant_wt$target_id[2]
plot_bootstrap(so, target_id=(dplyr::filter(t2g, ens_gene==selected_gene))$target_id[1], units = "est_counts", color_by = "condition")

selected_gene <- sleuth_significant_wt$target_id[3]
plot_bootstrap(so, target_id=(dplyr::filter(t2g, ens_gene==selected_gene))$target_id[1], units = "est_counts", color_by = "condition")

#saving the gene differential expression results 

#checking the table has no duplicate entries
length(unique(sleuth_table_wt$target_id)) == length(sleuth_table_wt$target_id)

write.table(sleuth_significant_wt$target_id, file= "C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_FetalvsACP\\sleuth_significant_q005_NEW.txt", quote=FALSE, row.names = FALSE, col.names = "#target_id")
write.table(sleuth_significant_wt$ext_gene, file= "C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_FetalvsACP\\sleuth_significant_q005_NAMES.txt", quote=FALSE, row.names = FALSE, col.names = "#ext_gene")

##### TRANSCRIPT-LEVEL ANALYSIS #####
sleuth_table_txn <- sleuth_results(so, test = 'conditionFetal',test_type = 'wt',which_model = 'full',show_all = TRUE,pval_aggregate = FALSE)
dim(sleuth_table_txn)
sleuth_table_txn[1:5,]

#significant transcripts:
sleuth_significant_txn <- dplyr::filter(sleuth_table_txn, qval <= 0.05)
dim(sleuth_significant_txn) 
head(sleuth_significant_txn, 3)

#saving the results
write.table(sleuth_significant_txn$target_id, file="C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_FetalvsACP\\sleuth_significant_TXN_q005.txt", quote=FALSE, row.names = FALSE, col.names = "#target_id") 
#determining up and down regulated transcripts and genes
sleuth_significant_txn.up <- dplyr::filter(sleuth_table_txn, (qval <= 0.05) & (b>0))  
dim(sleuth_significant_txn.up)
head(sleuth_significant_txn.up, 4)

#how many genes are upregulated? 
length(unique(sleuth_significant_txn.up$ens_gene))

#saving the gene ids instead of transcript ones
write.table(unique(sleuth_significant_txn.up$ens_gene), file="C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_FetalvsACP\\sleuth_significant_q005_up.txt", quote=FALSE, row.names = FALSE, col.names = "#ens_gene")
sleuth_significant_txn.down <- dplyr::filter(sleuth_table_txn, (qval <= 0.05) & (b<0)) 
head(sleuth_significant_txn.down, 4)

#how many genes are downpregulated? 
length(unique(sleuth_significant_txn.down$ens_gene))
write.table(unique(sleuth_significant_txn.down$ens_gene), file="C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_FetalvsACP\\sleuth_significant_q005_down.txt", quote=FALSE, row.names = FALSE, col.names = "#ens_gene")

####### SUMMARY OF NUMBERS ##########
#all transcripts included initially in the analysis: 
length(sleuth_table_txn$target_id)

#all transcripts included initially in the analysis:
length(sleuth_table_wt$target_id)

#the number of genes in the transcript table
length(unique(sleuth_table_txn$ens_gene))

#significantly DE genes (aggregated) in the gene results table at q<0.05 
length(sleuth_significant_wt$target_id)

#significantly DE transcripts in the transcript results table
length(sleuth_significant_txn$target_id) 

#how many genes correspond to the above transcripts?
length(unique(sleuth_significant_txn$ens_gene))

##Handling the NFPA(control)vsACP(tumour)##

#####GENE-LEVEL ANALYSIS#####
#do a Wald test 
so <- sleuth_wt(so, which_beta='conditionNFPA', which_model='full')
dim(sleuth_table_wt)

sleuth_table_wt <- sleuth_results(so, test= 'conditionNFPA', test_type = 'wt',which_model = 'full',show_all = TRUE)

#significant genes: 
sleuth_significant_wt <- dplyr::filter(sleuth_table_wt, qval <= 0.05)
dim(sleuth_significant_wt)
head(sleuth_significant_wt, 3)

#LRT test
so <- sleuth_fit(so, ~1, 'null')
so <- sleuth_lrt(so, 'null', 'full')
sleuth_table_lrt <- sleuth_results(so, test='null:full', 'lrt')
sleuth_table_lrt[1:5,]
sleuth_significant_lrt <- dplyr::filter(sleuth_table_lrt, qval <= 0.05)
dim(sleuth_significant_lrt)
head(sleuth_significant_lrt, 3)

#counts for top significant genes in Wald Test
selected_gene <- sleuth_significant_wt$target_id[1]
plot_bootstrap(so, target_id=(dplyr::filter(t2g, ens_gene==selected_gene))$target_id[1], units = "est_counts", color_by = "condition")

selected_gene <- sleuth_significant_wt$target_id[2]
plot_bootstrap(so, target_id=(dplyr::filter(t2g, ens_gene==selected_gene))$target_id[1], units = "est_counts", color_by = "condition")

selected_gene <- sleuth_significant_wt$target_id[3]
plot_bootstrap(so, target_id=(dplyr::filter(t2g, ens_gene==selected_gene))$target_id[1], units = "est_counts", color_by = "condition")

#saving the gene differential expression results 

#checking the table has no duplicate entries
length(unique(sleuth_table_wt$target_id)) == length(sleuth_table_wt$target_id)

write.table(sleuth_significant_wt$target_id, file= "C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_NFPAvsACP\\sleuth_significant_q005_NEW.txt", quote=FALSE, row.names = FALSE, col.names = "#target_id")
write.table(sleuth_significant_wt$ext_gene, file= "C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_NFPAvsACP\\sleuth_significant_q005_NAMES.txt", quote=FALSE, row.names = FALSE, col.names = "#ext_gene")

##### TRANSCRIPT-LEVEL ANALYSIS #####
sleuth_table_txn <- sleuth_results(so, test = 'conditionNFPA',test_type = 'wt',which_model = 'full',show_all = TRUE,pval_aggregate = FALSE)
dim(sleuth_table_txn)
sleuth_table_txn[1:5,]

#significant transcripts:
sleuth_significant_txn <- dplyr::filter(sleuth_table_txn, qval <= 0.05)
dim(sleuth_significant_txn) 
head(sleuth_significant_txn, 3)

#saving the results
write.table(sleuth_significant_txn$target_id, file="C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_NFPAvsACP\\sleuth_significant_TXN_q005.txt", quote=FALSE, row.names = FALSE, col.names = "#target_id") 
#determining up and down regulated transcripts and genes
sleuth_significant_txn.up <- dplyr::filter(sleuth_table_txn, (qval <= 0.05) & (b>0))  
dim(sleuth_significant_txn.up)
head(sleuth_significant_txn.up, 4)

#how many genes are upregulated? 
length(unique(sleuth_significant_txn.up$ens_gene))

#saving the gene ids instead of transcript ones
write.table(unique(sleuth_significant_txn.up$ens_gene), file="C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_NFPAvsACP\\sleuth_significant_q005_up.txt", quote=FALSE, row.names = FALSE, col.names = "#ens_gene")
sleuth_significant_txn.down <- dplyr::filter(sleuth_table_txn, (qval <= 0.05) & (b<0)) 
head(sleuth_significant_txn.down, 4)

#how many genes are downpregulated? 
length(unique(sleuth_significant_txn.down$ens_gene))
write.table(unique(sleuth_significant_txn.down$ens_gene), file="C:\\Users\\Asus\\Documents\\rna_seq\\results_variables_3\\results_NFPAvsACP\\sleuth_significant_q005_down.txt", quote=FALSE, row.names = FALSE, col.names = "#ens_gene")

####### SUMMARY OF NUMBERS ##########
#all transcripts included initially in the analysis: 
length(sleuth_table_txn$target_id)

#all transcripts included initially in the analysis:
length(sleuth_table_wt$target_id)

#the number of genes in the transcript table
length(unique(sleuth_table_txn$ens_gene))

#significantly DE genes (aggregated) in the gene results table at q<0.05 
length(sleuth_significant_wt$target_id)

#significantly DE transcripts in the transcript results table
length(sleuth_significant_txn$target_id) 

#how many genes correspond to the above transcripts?
length(unique(sleuth_significant_txn$ens_gene))


### Exploratory Data Analysis###

plot_pca(so,color_by = 'condition',text_labels = FALSE)
plot_pca(so,color_by = 'condition',text_labels = TRUE)

plot_pca(so,color_by = 'condition',text_labels = TRUE, units="tpm")
plot_pca(so,color_by = 'condition',text_labels = FALSE, units="tpm")

plot_pca(so,pc_x=2,pc_y=3,color_by = 'condition',text_labels = FALSE)
plot_pca(so,pc_x=2,pc_y=3,color_by = 'condition',text_labels = TRUE)

plot_pca(so,pc_x=2,pc_y=8,color_by = 'condition',text_labels = FALSE)
plot_pca(so,pc_x=2,pc_y=8,color_by = 'condition',text_labels = TRUE)

#how much of the variance is accounted for by each PC?
plot_pc_variance(obj = so, units = "est_counts")
plot_pc_variance(obj = so, units = "tpm")


plot_loadings(so, pc_input=1)
plot_loadings(so, pc_input=2)
plot_loadings(so, pc_input=3)
plot_loadings(so, pc_input=8) 

plot_group_density(so,
                   use_filtered = FALSE,
                   units = "est_counts",
                   trans = "log",
                   grouping = "condition")
plot_group_density(so,
                   use_filtered = TRUE,
                   units = "est_counts",
                   trans = "log",
                   grouping = "condition")


library(ggplot2)
plot_sample_heatmap(so)

