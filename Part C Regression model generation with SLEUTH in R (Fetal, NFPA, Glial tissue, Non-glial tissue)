if (!requireNamespace("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
BiocManager::install()
##Installing sleuth packages
BiocManager::install(c("rhdf5"))
install.packages("devtools")
#devtools::install_github("pachterlab/sleuth")
BiocManager::install("pachterlab/sleuth")
BiocManager::install(c("biomaRt"))
library('sleuth')
library('biomaRt')

##Setting up variables containing paths and directories for which the Kallisto results are found
sample_id <- dir(file.path("C:\\Users\\Asus\\Documents\\rna_seq\\kallisto_results\\"))
sample_id

kal_dirs <- file.path("C:\\Users\\Asus\\Documents\\rna_seq\\kallisto_results\\", sample_id)
kal_dirs

##Reading in the meta data to a variable
s2c <- read.table(file.path("C:\\Users\\Asus\\Documents\\rna_seq\\metadata\\SraRunTable.txt"), header = TRUE, stringsAsFactors=FALSE, sep = ",")
s2c <- dplyr::select(s2c, sample = Run, condition = Type, tissue_state = Reactivetissue)
s2c <- dplyr::mutate(s2c, path = kal_dirs)
s2c

##Associating transcripts to genes
mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",dataset = "hsapiens_gene_ensembl",host = "dec2015.archive.ensembl.org")

t2g <- biomaRt::getBM(attributes = c("ensembl_transcript_id", "transcript_version", "ensembl_gene_id", "external_gene_name", "description","transcript_biotype"),mart = mart)
head(t2g)

t2g$ensembl_transcript_id_version = paste(t2g$ensembl_transcript_id, t2g$transcript_version, sep=".")
t2g <- dplyr::rename(t2g, target_id = ensembl_transcript_id_version,ens_gene = ensembl_gene_id, ext_gene = external_gene_name)
t2g <- dplyr::select(t2g, c('target_id', 'ens_gene', 'ext_gene'))
head(t2g)

# this function is mostly to deal with ENSEMBL transcript names that
# have a trailing .N to keep track of version number
# the function also checks to see if there are duplicate entries for any target IDs
# and issues a warning if sleuth prep is in transcript mode, but stops if
# sleuth prep is in gene mode, since duplicate entries creates problems when
# doing the aggregation
# finally, this method also forces all of the columns in the target_mapping to be
# character columns, to prevent any issues with factors or other data types
# interfering with downstream uses of the target_mapping table

check_target_mapping <- function(t2g, target_mapping, gene_mode) {
  t2g <- data.table::as.data.table(t2g)
  t2g$target_id <- as.character(t2g$target_id)
  target_mapping <- apply(target_mapping, 2, as.character)
  target_mapping <- data.table::as.data.table(target_mapping)
  
  tmp_join <- dplyr::inner_join(t2g, target_mapping, by = 'target_id')
  
  if (!nrow(tmp_join)) {
    t2g <- dplyr::mutate(t2g, target_id_old = sub('\\.[0-9]+', '', target_id))
    target_mapping_upd <- dplyr::rename(target_mapping, target_id_old = target_id)
    
    tmp_join <- dplyr::inner_join(t2g, target_mapping_upd,
                                  c('target_id_old'))
    
    if (!nrow(tmp_join)) {
      stop("couldn't solve nonzero intersection")
    }
    
    target_mapping <- dplyr::left_join(target_mapping,
                                       unique(dplyr::select(tmp_join, target_id_new = target_id,
                                                            target_id = target_id_old),
                                              by = NULL),
                                       by = 'target_id')
    # if we couldn't recover, use the old one
    target_mapping <- dplyr::mutate(target_mapping,
                                    target_id_new = ifelse(is.na(target_id_new), target_id, target_id_new))
    target_mapping <- dplyr::select(target_mapping, -target_id)
    target_mapping <- dplyr::rename(target_mapping, target_id = target_id_new)
    
    warning(paste0('intersection between target_id from kallisto runs and ',
                   'the target_mapping is empty. attempted to fix problem by removing .N ',
                   'from target_id, then merging back into target_mapping.',
                   ' please check obj$target_mapping to ensure this new mapping is correct.'))
  }
  
  if(any(duplicated(target_mapping$target_id))) {
    indices <- which(duplicated(target_mapping$target_id))
    duplicated_ids <- target_mapping$target_id[indices]
    formatted_ids <- paste(duplicated_ids, collapse = ", ")
    if(gene_mode) {
      stop("There is at least one duplicated target ID in the target mapping. ",
           "Since sleuth prep is in gene aggregation mode, any duplicated ",
           "entries will cause errors during gene aggregation. Here is a list ",
           "of all the duplicated target IDs:\n", formatted_ids)
    } else {
      warning("There is at least one duplicated target ID in the target ",
              "mapping. Since sleuth prep is not in gene aggregation mode, ",
              "duplicated entries will not cause errors during preparation, ",
              "but may cause unexpected behavior when making any plots or ",
              "tables. Here is a list of all the duplicated target IDs:\n",
              formatted_ids)
    }
  }
  adf(target_mapping)
}

##Differential expression
#Preparing the analysis object
design <- ~condition + tissue_state
so <- sleuth_prep(s2c, full_model = design, read_bootstrap_tpm = TRUE, extra_bootstrap_summary=TRUE, target_mapping = t2g, transform_fun_counts = function(x) log2(x + 0.5),  aggregation_column = 'ens_gene') 
